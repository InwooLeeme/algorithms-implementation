#pragma GCC target("avx,avx2,fma")
#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#include <bits/stdc++.h>
#include <ext/rope>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define fastio ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)
using namespace std;
using namespace __gnu_cxx;
using namespace __gnu_pbds;

#define X first
#define Y second
#define int int64_t
#define sz(v) (int)(v).size()
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define Compress(v) sort(all(v)), (v).erase(unique(all(v)), (v).end())
#define OOB(x, y) ((x) < 0 || (x) >= n || (y) < 0 || (y) >= m)
#define IDX(v, x) (lower_bound(all(v), x) - (v).begin())
#define debug(x) cout << (#x) << ": " << (x) << '\n'
#define sf1(a) cin >> a
#define sf2(a,b) cin >> a >> b
#define sf3(a,b,c) cin >> a >> b >> c
#define sf4(a,b,c,d) cin >> a >> b >> c >> d
#define sf5(a,b,c,d,e) cin >> a >> b >> c >> d >> e
#define sf6(a,b,c,d,e,f) cin >> a >> b >> c >> d >> e >> f
#define pf1(a) cout << (a) << ' '
#define pf2(a,b) cout << (a) << ' ' << (b) << ' '
#define pf3(a,b,c) cout << (a) << ' ' << (b) << ' '<< (c) << ' '
#define pf4(a,b,c,d) cout << (a) << ' ' << (b) << ' '<< (c) << ' '<< (d) << ' '
#define pf5(a,b,c,d,e) cout << (a) << ' ' << (b) << ' '<< (c) << ' '<< (d) << ' '<< (e) << ' '
#define pf6(a,b,c,d,e,f) cout << (a) << ' ' << (b) << ' '<< (c) << ' '<< (d) << ' '<< (e) << ' ' << (f) << ' '
#define pf0l() cout << '\n';
#define pf1l(a) cout << (a) << '\n'
#define pf2l(a,b) cout << (a) << ' ' << (b) << '\n'
#define pf3l(a,b,c) cout << (a) << ' ' << (b) << ' '<< (c) << '\n'
#define pf4l(a,b,c,d) cout << (a) << ' ' << (b) << ' '<< (c) << ' '<< (d) << '\n'
#define pf5l(a,b,c,d,e) cout << (a) << ' ' << (b) << ' '<< (c) << ' '<< (d) << ' '<< (e) << '\n'
#define pf6l(a,b,c,d,e,f) cout << (a) << ' ' << (b) << ' '<< (c) << ' '<< (d) << ' '<< (e) << ' ' << (f) << '\n'
#define pfvec(V) for(auto const &t : V) pf1(t)
#define pfvecl(V) for(auto const &t : V) pf1(t); pf0l()
#define rep(i,a,b) for(int i = a; i < b; i++)
#define init(x, y) memset(x, y, sizeof(x));

using ll = long long;
using ull = unsigned long long;
using pii = pair<int, int>;
using pll = pair<ll, ll>;
using tii = tuple<int, int, int>;
template <typename T>
using wector = vector<vector<T>>;
template <typename T>
using max_heap = priority_queue<T>;
template <typename T>
using min_heap = priority_queue<T, vector<T>, greater<T>>;
template <typename T>
using ordered_set = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;

const int dx[4] = { 1,-1,0,0 };
const int dy[4] = { 0,0,1,-1 };
const int ddx[8] = { 0,0,1,1,1,-1,-1,-1 }, ddy[8] = { 1,-1,1,0,-1,1,0,-1 };
const int MOD = 1e9 + 7;

// 1 - indexed base //
struct EularCircuit{
	int n,id;
	vector<vector<int>> adj;
	vector<stack<pii>> v;
	vector<int> check,eularCircuit;
	
	EularCircuit(int n):
		n(n),id(0),
		adj(n + 1,vector<int>(n + 1)),v(n + 1) {}
	
	void DFS(int cur){
		while(1){
			while(!v[cur].empty() and check[v[cur].top().second]) v[cur].pop();
			if(v[cur].empty()) break;
			
			auto [x, y] = v[cur].top(); v[cur].pop();
			check[y] = 1,DFS(x);
		}
		eularCircuit.push_back(cur);
	}
	
	void AddEdge(){
		for(int i = 1; i <= n; i++){
			for(int j = i + 1; j <= n; j++){
				while(adj[i][j]){
					adj[i][j]--,id++;
					v[i].push({j, id}),v[j].push({i, id});
				}
			}
		}
		check.resize(id + 1);
	}
	
	void Excute(int root = 1){
		DFS(root);
	}
	
	bool isExit(){
		for(int i = 1; i <= n; i++)	if(v[i].size() % 2) return 0;
		return 1;
	}
	
	void Print(){
		for(const auto& i : eularCircuit) cout << i << ' ';
	}
};

int32_t main(){
	fastio;
	int n; sf1(n);
	EularCircuit EC(n);
	for(int i = 1; i <= n; i++) for(int j = 1; j <= n; j++) sf1(EC.adj[i][j]);
	EC.AddEdge();
	if(!EC.isExit()){
		cout << -1 << "\n";
		return 0;
	}
	else{
		EC.Excute(1);
		EC.Print();
	}
}
